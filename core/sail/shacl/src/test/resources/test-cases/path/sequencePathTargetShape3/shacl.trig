@prefix ex: <http://example.com/ns#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf4j: <http://rdf4j.org/schema/rdf4j#> .
@prefix rsx: <http://rdf4j.org/shacl-extensions#> .
@prefix dash:      <http://datashapes.org/dash#> .


rdf4j:SHACLShapeGraph {
  ex:PersonShape a sh:NodeShape;
    rsx:targetShape [
     sh:property [
                        sh:path rdf:type ;
                        sh:hasValue ex:Person ;
                    ];
        sh:property [
            sh:path (ex:knows1 ex:knows2 ex:knows3 ex:knows4 ex:knows5  rdf:type);
            sh:hasValue ex:Person
       ];
        sh:property [
            sh:path (ex:knows1 ex:knows2 ex:knows3 ex:knows4 );
            dash:hasValueIn (ex:person1 ex:person2 ex:person3 ex:person4 ex:person5 ex:person6)
        ];

    ];
    sh:property [
        sh:path (ex:knows ex:knows rdf:type);
        sh:not [sh:hasValue ex:NotPerson]
    ] ;

     sh:property [
            sh:path ex:test;
            sh:hasValue ex:yay
        ] ;

     sh:property [
            sh:path ex:test;
            sh:not [sh:hasValue ex:nay]
        ] ;

   sh:property [
            sh:path (ex:test rdf:type);
            sh:hasValue ex:NotPerson
        ] ;

      sh:property [
                sh:path [sh:inversePath ex:knows1];
                sh:hasValue ex:person1
            ] .

}
