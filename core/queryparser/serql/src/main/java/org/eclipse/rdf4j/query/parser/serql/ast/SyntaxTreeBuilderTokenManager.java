/*******************************************************************************
 * Copyright (c) 2015 Eclipse RDF4J contributors, Aduna, and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Distribution License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *******************************************************************************/

package org.eclipse.rdf4j.query.parser.serql.ast;

/* Generated By:JJTree&JavaCC: Do not edit this line. SyntaxTreeBuilderTokenManager.java */

/** Token Manager. */
public class SyntaxTreeBuilderTokenManager implements SyntaxTreeBuilderConstants {

	/** Debug output. */
	public java.io.PrintStream debugStream = System.out;

	/** Set debug output. */
	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
		switch (pos) {
		case 0:
			if ((active0 & 0xffffffffffe00000L) != 0L || (active1 & 0x3L) != 0L) {
				jjmatchedKind = 77;
				return 114;
			}
			if ((active0 & 0x300L) != 0L) {
				return 6;
			}
			return -1;
		case 1:
			if ((active0 & 0x24000101c0000000L) != 0L || (active1 & 0x1L) != 0L) {
				return 114;
			}
			if ((active0 & 0xdbfffefe3fe00000L) != 0L || (active1 & 0x2L) != 0L) {
				if (jjmatchedPos != 1) {
					jjmatchedKind = 77;
					jjmatchedPos = 1;
				}
				return 114;
			}
			return -1;
		case 2:
			if ((active0 & 0xc00800c100000000L) != 0L) {
				return 114;
			}
			if ((active0 & 0x3bf7fe3e7fe00000L) != 0L || (active1 & 0x2L) != 0L) {
				jjmatchedKind = 77;
				jjmatchedPos = 2;
				return 114;
			}
			return -1;
		case 3:
			if ((active0 & 0x21941208000000L) != 0L) {
				return 114;
			}
			if ((active0 & 0x3bd66a2c77e00000L) != 0L || (active1 & 0x2L) != 0L) {
				if (jjmatchedPos != 3) {
					jjmatchedKind = 77;
					jjmatchedPos = 3;
				}
				return 114;
			}
			return -1;
		case 4:
			if ((active0 & 0x22c70a0817c00000L) != 0L || (active1 & 0x2L) != 0L) {
				jjmatchedKind = 77;
				jjmatchedPos = 4;
				return 114;
			}
			if ((active0 & 0x1910602460200000L) != 0L) {
				return 114;
			}
			return -1;
		case 5:
			if ((active0 & 0x80800800000L) != 0L || (active1 & 0x2L) != 0L) {
				return 114;
			}
			if ((active0 & 0x22c7020017400000L) != 0L) {
				jjmatchedKind = 77;
				jjmatchedPos = 5;
				return 114;
			}
			return -1;
		case 6:
			if ((active0 & 0x80000014000000L) != 0L) {
				return 114;
			}
			if ((active0 & 0x2247020003400000L) != 0L) {
				jjmatchedKind = 77;
				jjmatchedPos = 6;
				return 114;
			}
			return -1;
		case 7:
			if ((active0 & 0x2020002000000L) != 0L) {
				return 114;
			}
			if ((active0 & 0x2245000001400000L) != 0L) {
				jjmatchedKind = 77;
				jjmatchedPos = 7;
				return 114;
			}
			return -1;
		case 8:
			if ((active0 & 0x41000000000000L) != 0L) {
				jjmatchedKind = 77;
				jjmatchedPos = 8;
				return 114;
			}
			if ((active0 & 0x2204000001400000L) != 0L) {
				return 114;
			}
			return -1;
		case 9:
			if ((active0 & 0x40000000000000L) != 0L) {
				return 114;
			}
			if ((active0 & 0x1000000000000L) != 0L) {
				jjmatchedKind = 77;
				jjmatchedPos = 9;
				return 114;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_0(int pos, long active0, long active1) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
	}

	private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 33:
			return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
		case 40:
			return jjStopAtPos(0, 17);
		case 41:
			return jjStopAtPos(0, 18);
		case 42:
			return jjStopAtPos(0, 12);
		case 44:
			return jjStopAtPos(0, 13);
		case 59:
			return jjStopAtPos(0, 14);
		case 60:
			jjmatchedKind = 8;
			return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
		case 61:
			return jjStopAtPos(0, 6);
		case 62:
			jjmatchedKind = 11;
			return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
		case 91:
			return jjStopAtPos(0, 19);
		case 93:
			return jjStopAtPos(0, 20);
		case 65:
		case 97:
			return jjMoveStringLiteralDfa1_0(0xc400008100000000L, 0x0L);
		case 66:
		case 98:
			return jjMoveStringLiteralDfa1_0(0x10000080000000L, 0x0L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa1_0(0x100011000000L, 0x0L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa1_0(0x2000202000000L, 0x0L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
		case 70:
		case 102:
			return jjMoveStringLiteralDfa1_0(0x2008000000L, 0x0L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa1_0(0x23c0080000000000L, 0x1L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa1_0(0x5c40400000000L, 0x0L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa1_0(0x20004000400000L, 0x0L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa1_0(0x10840000000L, 0x0L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa1_0(0x200004000000L, 0x0L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa1_0(0x8020000800000L, 0x0L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa1_0(0x800000000200000L, 0x0L);
		case 87:
		case 119:
			return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
		case 123:
			return jjStopAtPos(0, 15);
		case 125:
			return jjStopAtPos(0, 16);
		default:
			return jjMoveNfa_0(0, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_0(long active0, long active1) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0, active1);
			return 1;
		}
		switch (curChar) {
		case 61:
			if ((active0 & 0x80L) != 0L) {
				return jjStopAtPos(1, 7);
			} else if ((active0 & 0x200L) != 0L) {
				return jjStopAtPos(1, 9);
			} else if ((active0 & 0x400L) != 0L) {
				return jjStopAtPos(1, 10);
			}
			break;
		case 65:
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0x3d22000400000L, active1, 0L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa2_0(active0, 0x200204800000L, active1, 0L);
		case 70:
		case 102:
			return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
		case 71:
		case 103:
			return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
		case 72:
		case 104:
			return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa2_0(active0, 0x1000040402000000L, active1, 0L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
		case 78:
		case 110:
			if ((active1 & 0x1L) != 0L) {
				jjmatchedKind = 64;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x6800008000000000L, active1, 0L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa2_0(active0, 0x14004011000000L, active1, 0L);
		case 82:
		case 114:
			if ((active0 & 0x10000000000L) != 0L) {
				jjmatchedKind = 40;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x1048000000L, active1, 0L);
		case 83:
		case 115:
			if ((active0 & 0x400000000000000L) != 0L) {
				jjmatchedKind = 58;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x3c0000100200000L, active1, 0L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
		case 88:
		case 120:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
		case 89:
		case 121:
			if ((active0 & 0x80000000L) != 0L) {
				return jjStartNfaWithStates_0(1, 31, 114);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(0, active0, active1);
	}

	private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(0, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0, active1);
			return 2;
		}
		switch (curChar) {
		case 66:
		case 98:
			return jjMoveStringLiteralDfa3_0(active0, 0x80400000000000L, active1, 0L);
		case 67:
		case 99:
			if ((active0 & 0x100000000L) != 0L) {
				return jjStartNfaWithStates_0(2, 32, 114);
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
		case 68:
		case 100:
			if ((active0 & 0x8000000000L) != 0L) {
				return jjStartNfaWithStates_0(2, 39, 114);
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x44000000L, active1, 0L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
		case 70:
		case 102:
			return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
		case 71:
		case 103:
			return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa3_0(active0, 0x800000000200000L, active1, 0x2L);
		case 75:
		case 107:
			return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
		case 76:
		case 108:
			if ((active0 & 0x8000000000000000L) != 0L) {
				return jjStartNfaWithStates_0(2, 63, 114);
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x220002000800000L, active1, 0L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa3_0(active0, 0x20400400000L, active1, 0L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa3_0(active0, 0x1001880011000000L, active1, 0L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
		case 82:
		case 114:
			if ((active0 & 0x8000000000000L) != 0L) {
				return jjStartNfaWithStates_0(2, 51, 114);
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa3_0(active0, 0x100202000000L, active1, 0L);
		case 84:
		case 116:
			if ((active0 & 0x4000000000L) != 0L) {
				return jjStartNfaWithStates_0(2, 38, 114);
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x2002000000000000L, active1, 0L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa3_0(active0, 0x110001000000000L, active1, 0L);
		case 89:
		case 121:
			if ((active0 & 0x4000000000000000L) != 0L) {
				return jjStartNfaWithStates_0(2, 62, 114);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(1, active0, active1);
	}

	private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(1, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0, active1);
			return 3;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa4_0(active0, 0x6000000000000L, active1, 0L);
		case 67:
		case 99:
			if ((active0 & 0x200000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 33, 114);
			}
			break;
		case 69:
		case 101:
			if ((active0 & 0x1000000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 36, 114);
			} else if ((active0 & 0x40000000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 42, 114);
			} else if ((active0 & 0x100000000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 44, 114);
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x2040620040c00000L, active1, 0L);
		case 71:
		case 103:
			if ((active0 & 0x800000000000L) != 0L) {
				jjmatchedKind = 47;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa4_0(active0, 0x200000400000000L, active1, 0L);
		case 76:
		case 108:
			if ((active0 & 0x20000000000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 53, 114);
			}
			break;
		case 77:
		case 109:
			if ((active0 & 0x8000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 27, 114);
			}
			break;
		case 78:
		case 110:
			return jjMoveStringLiteralDfa4_0(active0, 0x90000000200000L, active1, 0L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa4_0(active0, 0x800080000000000L, active1, 0L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa4_0(active0, 0x100000020000000L, active1, 0L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa4_0(active0, 0x2801000000L, active1, 0x2L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa4_0(active0, 0x12000000L, active1, 0L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa4_0(active0, 0x1000000004000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0, active1);
	}

	private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(2, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0, active1);
			return 4;
		}
		switch (curChar) {
		case 67:
		case 99:
			return jjMoveStringLiteralDfa5_0(active0, 0x4800000L, active1, 0L);
		case 68:
		case 100:
			if ((active0 & 0x10000000000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 52, 114);
			}
			break;
		case 69:
		case 101:
			if ((active0 & 0x20000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 29, 114);
			} else if ((active0 & 0x2000000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 37, 114);
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x810000000L, active1, 0L);
		case 71:
		case 103:
			if ((active0 & 0x200000L) != 0L) {
				return jjStartNfaWithStates_0(4, 21, 114);
			}
			break;
		case 73:
		case 105:
			if ((active0 & 0x100000000000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 56, 114);
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L);
		case 76:
		case 108:
			if ((active0 & 0x400000000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 46, 114);
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
		case 78:
		case 110:
			if ((active0 & 0x800000000000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 59, 114);
			}
			break;
		case 79:
		case 111:
			return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L);
		case 82:
		case 114:
			if ((active0 & 0x40000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 30, 114);
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x2000080000000000L, active1, 0L);
		case 83:
		case 115:
			if ((active0 & 0x1000000000000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 60, 114);
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x40000000400000L, active1, 0L);
		case 84:
		case 116:
			if ((active0 & 0x400000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 34, 114);
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x202020001000000L, active1, 0x2L);
		case 88:
		case 120:
			if ((active0 & 0x200000000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 45, 114);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(3, active0, active1);
	}

	private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(3, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0, active1);
			return 5;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0L);
		case 69:
		case 101:
			if ((active0 & 0x80000000000L) != 0L) {
				return jjStartNfaWithStates_0(5, 43, 114);
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x200020004000000L, active1, 0L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa6_0(active0, 0x4000002000000L, active1, 0L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);
		case 83:
		case 115:
			if ((active1 & 0x2L) != 0L) {
				return jjStartNfaWithStates_0(5, 65, 114);
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
		case 84:
		case 116:
			if ((active0 & 0x800000L) != 0L) {
				return jjStartNfaWithStates_0(5, 23, 114);
			} else if ((active0 & 0x800000000L) != 0L) {
				return jjStartNfaWithStates_0(5, 35, 114);
			}
			break;
		case 88:
		case 120:
			return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L);
		case 89:
		case 121:
			return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(4, active0, active1);
	}

	private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(4, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0, 0L);
			return 6;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa7_0(active0, 0x4000000400000L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
		case 68:
		case 100:
			if ((active0 & 0x4000000L) != 0L) {
				return jjStartNfaWithStates_0(6, 26, 114);
			}
			break;
		case 69:
		case 101:
			if ((active0 & 0x80000000000000L) != 0L) {
				return jjStartNfaWithStates_0(6, 55, 114);
			}
			return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa7_0(active0, 0x200020000000000L);
		case 84:
		case 116:
			if ((active0 & 0x10000000L) != 0L) {
				return jjStartNfaWithStates_0(6, 28, 114);
			}
			return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa7_0(active0, 0x40000001000000L);
		default:
			break;
		}
		return jjStartNfa_0(5, active0, 0L);
	}

	private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(5, old0, 0L);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0, 0L);
			return 7;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa8_0(active0, 0x2001000001400000L);
		case 69:
		case 101:
			if ((active0 & 0x2000000000000L) != 0L) {
				return jjStartNfaWithStates_0(7, 49, 114);
			}
			break;
		case 77:
		case 109:
			if ((active0 & 0x20000000000L) != 0L) {
				return jjStartNfaWithStates_0(7, 41, 114);
			}
			return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L);
		case 84:
		case 116:
			if ((active0 & 0x2000000L) != 0L) {
				return jjStartNfaWithStates_0(7, 25, 114);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(6, active0, 0L);
	}

	private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(6, old0, 0L);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0, 0L);
			return 8;
		}
		switch (curChar) {
		case 67:
		case 99:
			return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);
		case 69:
		case 101:
			if ((active0 & 0x400000L) != 0L) {
				return jjStartNfaWithStates_0(8, 22, 114);
			} else if ((active0 & 0x4000000000000L) != 0L) {
				return jjStartNfaWithStates_0(8, 50, 114);
			}
			break;
		case 72:
		case 104:
			return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);
		case 76:
		case 108:
			if ((active0 & 0x200000000000000L) != 0L) {
				return jjStartNfaWithStates_0(8, 57, 114);
			}
			break;
		case 84:
		case 116:
			if ((active0 & 0x1000000L) != 0L) {
				return jjStartNfaWithStates_0(8, 24, 114);
			} else if ((active0 & 0x2000000000000000L) != 0L) {
				return jjStartNfaWithStates_0(8, 61, 114);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(7, active0, 0L);
	}

	private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(7, old0, 0L);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0, 0L);
			return 9;
		}
		switch (curChar) {
		case 69:
		case 101:
			if ((active0 & 0x40000000000000L) != 0L) {
				return jjStartNfaWithStates_0(9, 54, 114);
			}
			return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
		default:
			break;
		}
		return jjStartNfa_0(8, active0, 0L);
	}

	private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(8, old0, 0L);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0, 0L);
			return 10;
		}
		switch (curChar) {
		case 83:
		case 115:
			if ((active0 & 0x1000000000000L) != 0L) {
				return jjStartNfaWithStates_0(10, 48, 114);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(9, active0, 0L);
	}

	private int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	static final long[] jjbitVec0 = { 0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL,
			0xffffffffffffffffL };

	static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

	static final long[] jjbitVec3 = { 0x1600L, 0x0L, 0x0L, 0x0L };

	static final long[] jjbitVec4 = { 0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L };

	static final long[] jjbitVec5 = { 0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L };

	static final long[] jjbitVec6 = { 0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L };

	static final long[] jjbitVec7 = { 0x0L, 0xffc000000000L, 0x0L, 0x0L };

	static final long[] jjbitVec8 = { 0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L };

	static final long[] jjbitVec9 = { 0x3ff00000000L, 0x0L, 0x0L, 0x0L };

	static final long[] jjbitVec10 = { 0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x7fffffL };

	static final long[] jjbitVec11 = { 0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL };

	static final long[] jjbitVec12 = { 0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL, 0xffffffffffffffffL,
			0xfc31ffffffffe00fL };

	static final long[] jjbitVec13 = { 0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x3L };

	static final long[] jjbitVec14 = { 0x0L, 0x0L, 0xfffffffbffffd740L, 0xffffffc7f7fffL };

	static final long[] jjbitVec15 = { 0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L,
			0x33fcfffffff199fL };

	static final long[] jjbitVec16 = { 0xfffe000000000000L, 0xfffffffe027fffffL, 0x7fL, 0x707ffffff0000L };

	static final long[] jjbitVec17 = { 0x7fffffe00000000L, 0xfffe0000000007feL, 0x7cffffffffffffffL, 0x60002f7fffL };

	static final long[] jjbitVec18 = { 0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L };

	static final long[] jjbitVec19 = { 0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L };

	static final long[] jjbitVec20 = { 0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L };

	static final long[] jjbitVec21 = { 0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L };

	static final long[] jjbitVec22 = { 0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L };

	static final long[] jjbitVec23 = { 0xd7ffffffffffeL, 0x3fL, 0x200d6caefef02596L, 0x1fL };

	static final long[] jjbitVec24 = { 0x0L, 0x3fffffffeffL, 0x0L, 0x0L };

	static final long[] jjbitVec25 = { 0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL };

	static final long[] jjbitVec26 = { 0x500000000007daedL, 0x2c62ab82315001L, 0xf580c90040000000L,
			0x201080000000007L };

	static final long[] jjbitVec27 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL,
			0x3ffffffffffffffL };

	static final long[] jjbitVec28 = { 0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL,
			0x1fdc1fff0fcf1fdcL };

	static final long[] jjbitVec29 = { 0x4c4000000000L, 0x0L, 0x7L, 0x0L };

	static final long[] jjbitVec30 = { 0x3fe00000080L, 0xfffffffffffffffeL, 0xfffffffe001fffffL, 0x7ffffffffffffffL };

	static final long[] jjbitVec31 = { 0x1fffffffffe0L, 0x0L, 0x0L, 0x0L };

	static final long[] jjbitVec32 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L };

	static final long[] jjbitVec33 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L };

	static final long[] jjbitVec34 = { 0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL };

	static final long[] jjbitVec35 = { 0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x30003L };

	static final long[] jjbitVec36 = { 0xffffffffffffffffL, 0x30000003fL, 0xfffffffbffffd7c0L, 0xffffffc7f7fffL };

	static final long[] jjbitVec37 = { 0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff007bL,
			0x33fcfffffff199fL };

	static final long[] jjbitVec38 = { 0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe007fL,
			0x707ffffff0016L };

	static final long[] jjbitVec39 = { 0x7fffffe00000000L, 0xffff03ff0007ffffL, 0x7cffffffffffffffL,
			0x3ff3dffffef7fffL };

	static final long[] jjbitVec40 = { 0xf3ffffffffffffeeL, 0xffcfff1e3fffL, 0xd3c5fdfffff99feeL, 0x3ffcfb080399fL };

	static final long[] jjbitVec41 = { 0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100003bbfL };

	static final long[] jjbitVec42 = { 0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L };

	static final long[] jjbitVec43 = { 0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL };

	static final long[] jjbitVec44 = { 0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x0L, 0x0L };

	static final long[] jjbitVec45 = { 0x7ff7ffffffffffeL, 0x3ff7fffL, 0x3bff6caefef02596L, 0x3ff3f5fL };

	static final long[] jjbitVec46 = { 0xc2a003ff03000000L, 0xfffe03fffffffeffL, 0x2fe3ffffebf0fdfL, 0x0L };

	static final long[] jjbitVec47 = { 0x0L, 0x0L, 0x0L, 0x21fff0000L };

	static final long[] jjbitVec48 = { 0x3efffe000000a0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL,
			0x77ffffffffffffffL };

	private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 114;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff) {
				ReInitRounds();
			}
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 78) {
								kind = 78;
							}
							jjCheckNAddStates(0, 2);
						} else if ((0x280000000000L & l) != 0L) {
							jjCheckNAddTwoStates(20, 21);
						} else if (curChar == 34) {
							jjCheckNAddStates(3, 11);
						} else if (curChar == 46) {
							jjCheckNAdd(22);
						} else if (curChar == 60) {
							jjstateSet[jjnewStateCnt++] = 6;
						} else if (curChar == 35) {
							if (kind > 5) {
								kind = 5;
							}
							jjCheckNAddStates(12, 14);
						}
						if (curChar == 45) {
							jjCheckNAdd(18);
						} else if (curChar == 43) {
							jjCheckNAdd(16);
						}
						break;
					case 114:
						if ((0x3ff600000000000L & l) != 0L) {
							if (kind > 77) {
								kind = 77;
							}
							jjCheckNAdd(109);
						} else if (curChar == 58) {
							if (kind > 75) {
								kind = 75;
							}
							jjCheckNAdd(108);
						}
						if ((0x3ff600000000000L & l) != 0L) {
							jjCheckNAddTwoStates(106, 107);
						}
						break;
					case 1:
						if ((0xffffffffffffdbffL & l) == 0L) {
							break;
						}
						if (kind > 5) {
							kind = 5;
						}
						jjCheckNAddStates(12, 14);
						break;
					case 2:
						if ((0x2400L & l) != 0L && kind > 5) {
							kind = 5;
						}
						break;
					case 3:
						if (curChar == 10 && kind > 5) {
							kind = 5;
						}
						break;
					case 4:
						if (curChar == 13) {
							jjstateSet[jjnewStateCnt++] = 3;
						}
						break;
					case 5:
						if (curChar == 60) {
							jjstateSet[jjnewStateCnt++] = 6;
						}
						break;
					case 7:
						if ((0x3ff680000000000L & l) != 0L) {
							jjAddStates(15, 16);
						}
						break;
					case 8:
						if (curChar == 58) {
							jjCheckNAdd(9);
						}
						break;
					case 9:
						if ((0xaffffffa00000000L & l) != 0L) {
							jjCheckNAddTwoStates(9, 10);
						}
						break;
					case 10:
						if (curChar == 62 && kind > 73) {
							kind = 73;
						}
						break;
					case 11:
						if (curChar == 58) {
							jjstateSet[jjnewStateCnt++] = 12;
						}
						break;
					case 13:
						if ((0x3ff600000000000L & l) == 0L) {
							break;
						}
						if (kind > 76) {
							kind = 76;
						}
						jjstateSet[jjnewStateCnt++] = 13;
						break;
					case 15:
						if (curChar == 43) {
							jjCheckNAdd(16);
						}
						break;
					case 16:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 78) {
							kind = 78;
						}
						jjCheckNAdd(16);
						break;
					case 17:
						if (curChar == 45) {
							jjCheckNAdd(18);
						}
						break;
					case 18:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 79) {
							kind = 79;
						}
						jjCheckNAdd(18);
						break;
					case 19:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAddTwoStates(20, 21);
						}
						break;
					case 20:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(20, 21);
						}
						break;
					case 21:
						if (curChar == 46) {
							jjCheckNAdd(22);
						}
						break;
					case 22:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 80) {
							kind = 80;
						}
						jjCheckNAdd(22);
						break;
					case 23:
						if (curChar == 34) {
							jjCheckNAddStates(3, 11);
						}
						break;
					case 24:
						if ((0xfffffffbffffffffL & l) != 0L) {
							jjCheckNAddStates(17, 19);
						}
						break;
					case 25:
						if (curChar == 34) {
							jjstateSet[jjnewStateCnt++] = 26;
						}
						break;
					case 28:
						if (curChar == 45) {
							jjCheckNAdd(29);
						}
						break;
					case 29:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 66) {
							kind = 66;
						}
						jjCheckNAddTwoStates(28, 29);
						break;
					case 31:
						if (curChar == 9) {
							jjCheckNAddStates(17, 19);
						}
						break;
					case 32:
						if (curChar == 13) {
							jjCheckNAddStates(17, 19);
						}
						break;
					case 33:
						if (curChar == 10) {
							jjCheckNAddStates(17, 19);
						}
						break;
					case 34:
						if (curChar == 34) {
							jjCheckNAddStates(17, 19);
						}
						break;
					case 37:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 38;
						}
						break;
					case 38:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 39;
						}
						break;
					case 39:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 40;
						}
						break;
					case 40:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 41;
						}
						break;
					case 41:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 42;
						}
						break;
					case 42:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 43;
						}
						break;
					case 43:
					case 48:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAdd(44);
						}
						break;
					case 44:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(17, 19);
						}
						break;
					case 46:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 47;
						}
						break;
					case 47:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 48;
						}
						break;
					case 49:
						if ((0xfffffffbffffffffL & l) != 0L) {
							jjCheckNAddStates(20, 22);
						}
						break;
					case 50:
						if (curChar == 34) {
							jjstateSet[jjnewStateCnt++] = 64;
						}
						break;
					case 52:
						if (curChar == 60) {
							jjstateSet[jjnewStateCnt++] = 53;
						}
						break;
					case 54:
						if ((0x3ff680000000000L & l) != 0L) {
							jjAddStates(23, 24);
						}
						break;
					case 55:
						if (curChar == 58) {
							jjCheckNAdd(56);
						}
						break;
					case 56:
						if ((0xaffffffa00000000L & l) != 0L) {
							jjCheckNAddTwoStates(56, 57);
						}
						break;
					case 57:
						if (curChar == 62 && kind > 67) {
							kind = 67;
						}
						break;
					case 59:
						if ((0x3ff600000000000L & l) != 0L) {
							jjCheckNAddTwoStates(59, 60);
						}
						break;
					case 60:
						if (curChar != 58) {
							break;
						}
						if (kind > 67) {
							kind = 67;
						}
						jjCheckNAdd(61);
						break;
					case 61:
						if ((0x3ff600000000000L & l) == 0L) {
							break;
						}
						if (kind > 67) {
							kind = 67;
						}
						jjCheckNAdd(61);
						break;
					case 63:
						if ((0x3ff600000000000L & l) != 0L) {
							jjCheckNAddTwoStates(63, 60);
						}
						break;
					case 66:
						if (curChar == 9) {
							jjCheckNAddStates(20, 22);
						}
						break;
					case 67:
						if (curChar == 13) {
							jjCheckNAddStates(20, 22);
						}
						break;
					case 68:
						if (curChar == 10) {
							jjCheckNAddStates(20, 22);
						}
						break;
					case 69:
						if (curChar == 34) {
							jjCheckNAddStates(20, 22);
						}
						break;
					case 72:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 73;
						}
						break;
					case 73:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 74;
						}
						break;
					case 74:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 75;
						}
						break;
					case 75:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 76;
						}
						break;
					case 76:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 77;
						}
						break;
					case 77:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 78;
						}
						break;
					case 78:
					case 83:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAdd(79);
						}
						break;
					case 79:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(20, 22);
						}
						break;
					case 81:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 82;
						}
						break;
					case 82:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 83;
						}
						break;
					case 84:
						if ((0xfffffffbffffffffL & l) != 0L) {
							jjCheckNAddStates(25, 27);
						}
						break;
					case 85:
						if (curChar == 34 && kind > 68) {
							kind = 68;
						}
						break;
					case 87:
						if (curChar == 9) {
							jjCheckNAddStates(25, 27);
						}
						break;
					case 88:
						if (curChar == 13) {
							jjCheckNAddStates(25, 27);
						}
						break;
					case 89:
						if (curChar == 10) {
							jjCheckNAddStates(25, 27);
						}
						break;
					case 90:
						if (curChar == 34) {
							jjCheckNAddStates(25, 27);
						}
						break;
					case 93:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 94;
						}
						break;
					case 94:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 95;
						}
						break;
					case 95:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 96;
						}
						break;
					case 96:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 97;
						}
						break;
					case 97:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 98;
						}
						break;
					case 98:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 99;
						}
						break;
					case 99:
					case 104:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAdd(100);
						}
						break;
					case 100:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(25, 27);
						}
						break;
					case 102:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 103;
						}
						break;
					case 103:
						if ((0x3ff000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 104;
						}
						break;
					case 106:
						if ((0x3ff600000000000L & l) != 0L) {
							jjCheckNAddTwoStates(106, 107);
						}
						break;
					case 107:
						if (curChar != 58) {
							break;
						}
						if (kind > 75) {
							kind = 75;
						}
						jjCheckNAdd(108);
						break;
					case 108:
						if ((0x3ff600000000000L & l) == 0L) {
							break;
						}
						if (kind > 75) {
							kind = 75;
						}
						jjCheckNAdd(108);
						break;
					case 109:
						if ((0x3ff600000000000L & l) == 0L) {
							break;
						}
						if (kind > 77) {
							kind = 77;
						}
						jjCheckNAdd(109);
						break;
					case 111:
						if ((0x3ff600000000000L & l) != 0L) {
							jjCheckNAddTwoStates(111, 107);
						}
						break;
					case 112:
						if ((0x3ff600000000000L & l) == 0L) {
							break;
						}
						if (kind > 77) {
							kind = 77;
						}
						jjstateSet[jjnewStateCnt++] = 112;
						break;
					case 113:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 78) {
							kind = 78;
						}
						jjCheckNAddStates(0, 2);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0x7fffffe07fffffeL & l) != 0L) {
							if (kind > 77) {
								kind = 77;
							}
							jjCheckNAddStates(28, 30);
						} else if (curChar == 95) {
							jjCheckNAddTwoStates(111, 112);
						}
						if (curChar == 95) {
							jjstateSet[jjnewStateCnt++] = 11;
						}
						break;
					case 114:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 77) {
								kind = 77;
							}
							jjCheckNAdd(109);
						}
						if ((0x7fffffe87fffffeL & l) != 0L) {
							jjCheckNAddTwoStates(106, 107);
						}
						break;
					case 1:
						if (kind > 5) {
							kind = 5;
						}
						jjAddStates(12, 14);
						break;
					case 6:
					case 7:
						if ((0x7fffffe07fffffeL & l) != 0L) {
							jjCheckNAddTwoStates(7, 8);
						}
						break;
					case 9:
						if ((0xc7fffffeafffffffL & l) != 0L) {
							jjAddStates(31, 32);
						}
						break;
					case 12:
					case 13:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 76) {
							kind = 76;
						}
						jjCheckNAdd(13);
						break;
					case 14:
						if (curChar == 95) {
							jjstateSet[jjnewStateCnt++] = 11;
						}
						break;
					case 24:
						if ((0xffffffffefffffffL & l) != 0L) {
							jjCheckNAddStates(17, 19);
						}
						break;
					case 26:
						if (curChar == 64) {
							jjCheckNAdd(27);
						}
						break;
					case 27:
						if ((0x7fffffe07fffffeL & l) == 0L) {
							break;
						}
						if (kind > 66) {
							kind = 66;
						}
						jjCheckNAddTwoStates(27, 28);
						break;
					case 29:
						if ((0x7fffffe07fffffeL & l) == 0L) {
							break;
						}
						if (kind > 66) {
							kind = 66;
						}
						jjCheckNAddTwoStates(28, 29);
						break;
					case 30:
						if (curChar == 92) {
							jjAddStates(33, 39);
						}
						break;
					case 35:
						if (curChar == 92) {
							jjCheckNAddStates(17, 19);
						}
						break;
					case 36:
						if ((0x20000000200000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 37;
						}
						break;
					case 37:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 38;
						}
						break;
					case 38:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 39;
						}
						break;
					case 39:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 40;
						}
						break;
					case 40:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 41;
						}
						break;
					case 41:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 42;
						}
						break;
					case 42:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 43;
						}
						break;
					case 43:
					case 48:
						if ((0x7e0000007eL & l) != 0L) {
							jjCheckNAdd(44);
						}
						break;
					case 44:
						if ((0x7e0000007eL & l) != 0L) {
							jjCheckNAddStates(17, 19);
						}
						break;
					case 45:
						if ((0x20000000200000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 46;
						}
						break;
					case 46:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 47;
						}
						break;
					case 47:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 48;
						}
						break;
					case 49:
						if ((0xffffffffefffffffL & l) != 0L) {
							jjCheckNAddStates(20, 22);
						}
						break;
					case 51:
						if (curChar == 94) {
							jjAddStates(40, 42);
						}
						break;
					case 53:
					case 54:
						if ((0x7fffffe07fffffeL & l) != 0L) {
							jjCheckNAddTwoStates(54, 55);
						}
						break;
					case 56:
						if ((0xc7fffffeafffffffL & l) != 0L) {
							jjAddStates(43, 44);
						}
						break;
					case 58:
						if ((0x7fffffe07fffffeL & l) != 0L) {
							jjCheckNAddTwoStates(59, 60);
						}
						break;
					case 59:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							jjCheckNAddTwoStates(59, 60);
						}
						break;
					case 61:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 67) {
							kind = 67;
						}
						jjstateSet[jjnewStateCnt++] = 61;
						break;
					case 62:
						if (curChar == 95) {
							jjCheckNAdd(63);
						}
						break;
					case 63:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							jjCheckNAddTwoStates(63, 60);
						}
						break;
					case 64:
						if (curChar == 94) {
							jjstateSet[jjnewStateCnt++] = 51;
						}
						break;
					case 65:
						if (curChar == 92) {
							jjAddStates(45, 51);
						}
						break;
					case 70:
						if (curChar == 92) {
							jjCheckNAddStates(20, 22);
						}
						break;
					case 71:
						if ((0x20000000200000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 72;
						}
						break;
					case 72:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 73;
						}
						break;
					case 73:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 74;
						}
						break;
					case 74:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 75;
						}
						break;
					case 75:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 76;
						}
						break;
					case 76:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 77;
						}
						break;
					case 77:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 78;
						}
						break;
					case 78:
					case 83:
						if ((0x7e0000007eL & l) != 0L) {
							jjCheckNAdd(79);
						}
						break;
					case 79:
						if ((0x7e0000007eL & l) != 0L) {
							jjCheckNAddStates(20, 22);
						}
						break;
					case 80:
						if ((0x20000000200000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 81;
						}
						break;
					case 81:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 82;
						}
						break;
					case 82:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 83;
						}
						break;
					case 84:
						if ((0xffffffffefffffffL & l) != 0L) {
							jjCheckNAddStates(25, 27);
						}
						break;
					case 86:
						if (curChar == 92) {
							jjAddStates(52, 58);
						}
						break;
					case 91:
						if (curChar == 92) {
							jjCheckNAddStates(25, 27);
						}
						break;
					case 92:
						if ((0x20000000200000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 93;
						}
						break;
					case 93:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 94;
						}
						break;
					case 94:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 95;
						}
						break;
					case 95:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 96;
						}
						break;
					case 96:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 97;
						}
						break;
					case 97:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 98;
						}
						break;
					case 98:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 99;
						}
						break;
					case 99:
					case 104:
						if ((0x7e0000007eL & l) != 0L) {
							jjCheckNAdd(100);
						}
						break;
					case 100:
						if ((0x7e0000007eL & l) != 0L) {
							jjCheckNAddStates(25, 27);
						}
						break;
					case 101:
						if ((0x20000000200000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 102;
						}
						break;
					case 102:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 103;
						}
						break;
					case 103:
						if ((0x7e0000007eL & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 104;
						}
						break;
					case 105:
						if ((0x7fffffe07fffffeL & l) == 0L) {
							break;
						}
						if (kind > 77) {
							kind = 77;
						}
						jjCheckNAddStates(28, 30);
						break;
					case 106:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							jjCheckNAddTwoStates(106, 107);
						}
						break;
					case 108:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 75) {
							kind = 75;
						}
						jjstateSet[jjnewStateCnt++] = 108;
						break;
					case 109:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 77) {
							kind = 77;
						}
						jjCheckNAdd(109);
						break;
					case 110:
						if (curChar == 95) {
							jjCheckNAddTwoStates(111, 112);
						}
						break;
					case 111:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							jjCheckNAddTwoStates(111, 107);
						}
						break;
					case 112:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 77) {
							kind = 77;
						}
						jjCheckNAdd(112);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int hiByte = (int) (curChar >> 8);
				int i1 = hiByte >> 6;
				long l1 = 1L << (hiByte & 077);
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 0:
						if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
							break;
						}
						if (kind > 77) {
							kind = 77;
						}
						jjCheckNAddStates(28, 30);
						break;
					case 114:
						if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
							jjCheckNAddTwoStates(106, 107);
						}
						if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
							if (kind > 77) {
								kind = 77;
							}
							jjCheckNAdd(109);
						}
						break;
					case 1:
						if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
							break;
						}
						if (kind > 5) {
							kind = 5;
						}
						jjAddStates(12, 14);
						break;
					case 7:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
							jjAddStates(15, 16);
						}
						break;
					case 9:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
							jjAddStates(31, 32);
						}
						break;
					case 12:
						if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
							break;
						}
						if (kind > 76) {
							kind = 76;
						}
						jjCheckNAdd(13);
						break;
					case 13:
						if (!jjCanMove_3(hiByte, i1, i2, l1, l2)) {
							break;
						}
						if (kind > 76) {
							kind = 76;
						}
						jjCheckNAdd(13);
						break;
					case 24:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
							jjAddStates(17, 19);
						}
						break;
					case 49:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
							jjAddStates(20, 22);
						}
						break;
					case 54:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
							jjAddStates(23, 24);
						}
						break;
					case 56:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
							jjAddStates(43, 44);
						}
						break;
					case 58:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
							jjCheckNAddTwoStates(59, 60);
						}
						break;
					case 59:
						if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
							jjCheckNAddTwoStates(59, 60);
						}
						break;
					case 61:
						if (!jjCanMove_3(hiByte, i1, i2, l1, l2)) {
							break;
						}
						if (kind > 67) {
							kind = 67;
						}
						jjstateSet[jjnewStateCnt++] = 61;
						break;
					case 63:
						if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
							jjCheckNAddTwoStates(63, 60);
						}
						break;
					case 84:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
							jjAddStates(25, 27);
						}
						break;
					case 106:
						if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
							jjCheckNAddTwoStates(106, 107);
						}
						break;
					case 108:
						if (!jjCanMove_3(hiByte, i1, i2, l1, l2)) {
							break;
						}
						if (kind > 75) {
							kind = 75;
						}
						jjstateSet[jjnewStateCnt++] = 108;
						break;
					case 109:
						if (!jjCanMove_3(hiByte, i1, i2, l1, l2)) {
							break;
						}
						if (kind > 77) {
							kind = 77;
						}
						jjCheckNAdd(109);
						break;
					case 111:
						if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
							jjCheckNAddTwoStates(111, 107);
						}
						break;
					case 112:
						if (!jjCanMove_3(hiByte, i1, i2, l1, l2)) {
							break;
						}
						if (kind > 77) {
							kind = 77;
						}
						jjstateSet[jjnewStateCnt++] = 112;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 114 - (jjnewStateCnt = startsAt))) {
				return curPos;
			}
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = { 16, 20, 21, 24, 25, 49, 50, 84, 85, 86, 65, 30, 1, 2, 4, 7, 8, 24, 25, 30, 49,
			50, 65, 54, 55, 84, 85, 86, 106, 107, 109, 9, 10, 31, 32, 33, 34, 35, 36, 45, 52, 58, 62, 56, 57, 66, 67,
			68, 69, 70, 71, 80, 87, 88, 89, 90, 91, 92, 101, };

	private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
		switch (hiByte) {
		case 0:
			return ((jjbitVec2[i2] & l2) != 0L);
		default:
			if ((jjbitVec0[i1] & l1) != 0L) {
				return true;
			}
			return false;
		}
	}

	private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
		switch (hiByte) {
		case 6:
			return ((jjbitVec5[i2] & l2) != 0L);
		case 11:
			return ((jjbitVec6[i2] & l2) != 0L);
		case 13:
			return ((jjbitVec7[i2] & l2) != 0L);
		case 14:
			return ((jjbitVec8[i2] & l2) != 0L);
		case 15:
			return ((jjbitVec9[i2] & l2) != 0L);
		default:
			if ((jjbitVec3[i1] & l1) != 0L) {
				if ((jjbitVec4[i2] & l2) == 0L) {
					return false;
				} else {
					return true;
				}
			}
			return false;
		}
	}

	private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2) {
		switch (hiByte) {
		case 0:
			return ((jjbitVec11[i2] & l2) != 0L);
		case 1:
			return ((jjbitVec12[i2] & l2) != 0L);
		case 2:
			return ((jjbitVec13[i2] & l2) != 0L);
		case 3:
			return ((jjbitVec14[i2] & l2) != 0L);
		case 4:
			return ((jjbitVec15[i2] & l2) != 0L);
		case 5:
			return ((jjbitVec16[i2] & l2) != 0L);
		case 6:
			return ((jjbitVec17[i2] & l2) != 0L);
		case 9:
			return ((jjbitVec18[i2] & l2) != 0L);
		case 10:
			return ((jjbitVec19[i2] & l2) != 0L);
		case 11:
			return ((jjbitVec20[i2] & l2) != 0L);
		case 12:
			return ((jjbitVec21[i2] & l2) != 0L);
		case 13:
			return ((jjbitVec22[i2] & l2) != 0L);
		case 14:
			return ((jjbitVec23[i2] & l2) != 0L);
		case 15:
			return ((jjbitVec24[i2] & l2) != 0L);
		case 16:
			return ((jjbitVec25[i2] & l2) != 0L);
		case 17:
			return ((jjbitVec26[i2] & l2) != 0L);
		case 30:
			return ((jjbitVec27[i2] & l2) != 0L);
		case 31:
			return ((jjbitVec28[i2] & l2) != 0L);
		case 33:
			return ((jjbitVec29[i2] & l2) != 0L);
		case 48:
			return ((jjbitVec30[i2] & l2) != 0L);
		case 49:
			return ((jjbitVec31[i2] & l2) != 0L);
		case 159:
			return ((jjbitVec32[i2] & l2) != 0L);
		case 215:
			return ((jjbitVec33[i2] & l2) != 0L);
		default:
			if ((jjbitVec10[i1] & l1) != 0L) {
				return true;
			}
			return false;
		}
	}

	private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2) {
		switch (hiByte) {
		case 0:
			return ((jjbitVec34[i2] & l2) != 0L);
		case 1:
			return ((jjbitVec12[i2] & l2) != 0L);
		case 2:
			return ((jjbitVec35[i2] & l2) != 0L);
		case 3:
			return ((jjbitVec36[i2] & l2) != 0L);
		case 4:
			return ((jjbitVec37[i2] & l2) != 0L);
		case 5:
			return ((jjbitVec38[i2] & l2) != 0L);
		case 6:
			return ((jjbitVec39[i2] & l2) != 0L);
		case 9:
			return ((jjbitVec40[i2] & l2) != 0L);
		case 10:
			return ((jjbitVec41[i2] & l2) != 0L);
		case 11:
			return ((jjbitVec42[i2] & l2) != 0L);
		case 12:
			return ((jjbitVec43[i2] & l2) != 0L);
		case 13:
			return ((jjbitVec44[i2] & l2) != 0L);
		case 14:
			return ((jjbitVec45[i2] & l2) != 0L);
		case 15:
			return ((jjbitVec46[i2] & l2) != 0L);
		case 16:
			return ((jjbitVec25[i2] & l2) != 0L);
		case 17:
			return ((jjbitVec26[i2] & l2) != 0L);
		case 30:
			return ((jjbitVec27[i2] & l2) != 0L);
		case 31:
			return ((jjbitVec28[i2] & l2) != 0L);
		case 32:
			return ((jjbitVec47[i2] & l2) != 0L);
		case 33:
			return ((jjbitVec29[i2] & l2) != 0L);
		case 48:
			return ((jjbitVec48[i2] & l2) != 0L);
		case 49:
			return ((jjbitVec31[i2] & l2) != 0L);
		case 159:
			return ((jjbitVec32[i2] & l2) != 0L);
		case 215:
			return ((jjbitVec33[i2] & l2) != 0L);
		default:
			if ((jjbitVec10[i1] & l1) != 0L) {
				return true;
			}
			return false;
		}
	}

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, "\75", "\41\75", "\74",
			"\74\75", "\76\75", "\76", "\52", "\54", "\73", "\173", "\175", "\50", "\51", "\133", "\135", null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, };

	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", };

	static final long[] jjtoToken = { 0xffffffffffffffc1L, 0x1fa1fL, };

	static final long[] jjtoSkip = { 0x3eL, 0x0L, };

	static final long[] jjtoSpecial = { 0x20L, 0x0L, };

	protected SimpleCharStream input_stream;

	private final int[] jjrounds = new int[114];

	private final int[] jjstateSet = new int[228];

	protected char curChar;

	/** Constructor. */
	public SyntaxTreeBuilderTokenManager(SimpleCharStream stream) {
		if (SimpleCharStream.staticFlag) {
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		}
		input_stream = stream;
	}

	/** Constructor. */
	public SyntaxTreeBuilderTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 114; i-- > 0;) {
			jjrounds[i] = 0x80000000;
		}
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0) {
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		} else {
			curLexState = lexState;
		}
	}

	protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	int curLexState = 0;

	int defaultLexState = 0;

	int jjnewStateCnt;

	int jjround;

	int jjmatchedPos;

	int jjmatchedKind;

	/** Get the next Token. */
	public Token getNextToken() {
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				matchedToken.specialToken = specialToken;
				return matchedToken;
			}

			try {
				input_stream.backup(0);
				while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L) {
					curChar = input_stream.BeginToken();
				}
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos) {
					input_stream.backup(curPos - jjmatchedPos - 1);
				}
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					matchedToken.specialToken = specialToken;
					return matchedToken;
				} else {
					if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						matchedToken = jjFillToken();
						if (specialToken == null) {
							specialToken = matchedToken;
						} else {
							matchedToken.specialToken = specialToken;
							specialToken = (specialToken.next = matchedToken);
						}
					}
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else {
					error_column++;
				}
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

	private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

}
